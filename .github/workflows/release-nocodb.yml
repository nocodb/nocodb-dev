name: 'NocoDB Release'

on:
  # Triggered manually
  workflow_dispatch:
    inputs:
      tag:
        description: "Target Tag"
        required: false
      prev_tag:
        description: "Previous Tag"
        required: false
jobs:
  # Validate Branch
  validate-branch:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo ${{ github.ref }}
          echo $GITHUB_REF
          echo "${GITHUB_REF##*/}"
          if [[ ${{ github.ref }} != 'refs/heads/master' ]]; then
            echo "NocoDB Release is only allowed to run on master branch"
            exit 1
          fi

  # Process Input
  process-input:
    runs-on: ubuntu-latest
    needs: validate-branch
    outputs:
      target_tag: ${{ steps.process-input.outputs.target_tag }}
      prev_tag: ${{ steps.process-input.outputs.prev_tag }}
    steps:
      - id: process-input
        name: process-input
        run: |
          TARGET_TAG=${{github.event.inputs.tag}}
          PREV_TAG=${{github.event.inputs.prev_tag}}

          if [[ ${PREV_TAG} == '' ]]; then
            # fetch the latest version
            PREV_TAG=$(basename $(curl -fs -o/dev/null -w %{redirect_url} https://github.com/nocodb/nocodb/releases/latest))
          fi

          if [[ ${TARGET_TAG} == '' ]]; then
            # bump the version from PREV_TAG
            TARGET_TAG=$(echo ${PREV_TAG} | awk -F. -v OFS=. '{$NF += 1 ; print}')
          fi
          echo target version: ${TARGET_TAG}
          echo previous version: ${PREV_TAG}
          echo "::set-output name=target_tag::${TARGET_TAG}"
          echo "::set-output name=prev_tag::${PREV_TAG}"
      - name: Verifiy
        run : |
          echo ${{ github.ref }}
          echo $GITHUB_REF
          echo ${{ steps.process-input.outputs.target_tag }} 

#   # Merge develop to master
#   pr-to-master:
#     needs: process-input
#     uses: ./.github/workflows/pr-to-master.yml
#     with:
#       tag: ${{ needs.process-input.outputs.target_tag }}
#       targetEnv: ${{ github.event.inputs.targetEnv || 'PROD' }}

#   # Close all issues with target tags 'Fixed' & 'Resolved'
#   close-fixed-issues:
#     needs: [pr-to-master, process-input]
#     uses: ./.github/workflows/release-close-issue.yml
#     with:
#       issue_label: 'Status: Fixed'
#       version: ${{ needs.process-input.outputs.target_tag }}
#   close-resolved-issues:
#     needs: [close-fixed-issues, process-input]
#     uses: ./.github/workflows/release-close-issue.yml
#     with:
#       issue_label: 'Status: Resolved'
#       version: ${{ needs.process-input.outputs.target_tag }}

  # Build, install, publish frontend and backend to npm
  release-npm:
    needs: [process-input]
#     needs: [close-resolved-issues, process-input]
    uses: ./.github/workflows/release-npm.yml
    with:
      tag: ${{ needs.process-input.outputs.target_tag }}
      targetEnv: ${{ github.event.inputs.targetEnv || 'PROD' }}
    secrets:
      NPM_TOKEN: "${{ secrets.NPM_TOKEN }}"

#   # Draft Release Note
#   release-draft-note:
#     needs: [release-npm, process-input]
#     uses: ./.github/workflows/release-draft.yml
#     with:
#       tag: ${{ needs.process-input.outputs.target_tag }}
#       prev_tag: ${{ needs.process-input.outputs.prev_tag }}

  # Build docker image and push to docker hub
  release-docker:
    needs: [release-draft-note, process-input]
    uses: ./.github/workflows/release-docker.yml
    with:
      tag: ${{ needs.process-input.outputs.target_tag }}
      targetEnv: ${{ github.event.inputs.targetEnv || 'PROD' }}
    secrets:
      DOCKERHUB_USERNAME: "${{ secrets.DOCKERHUB_USERNAME }}"
      DOCKERHUB_TOKEN: "${{ secrets.DOCKERHUB_TOKEN }}"

  # Sync changes to develop
  sync-to-develop:
    needs: release-docker
    uses: ./.github/workflows/sync-to-develop.yml
